#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2017 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

#*******************************************************************************
#***********************     Bulk Read and Bulk Write Example      ***********************
#  Required Environment to run this example :
#    - Protocol 2.0 supported DYNAMIXEL(X, P, PRO/PRO(A), MX 2.0 series). Note that the XL320 does not support Bulk Read and Bulk Write. 
#    - DYNAMIXEL Starter Set (U2D2, U2D2 PHB, 12V SMPS)
#  How to use the example :
#    - Select the DYNAMIXEL in use at the MY_DXL in the example code. 
#    - Build and Run from proper architecture subdirectory.
#    - For ARM based SBCs such as Raspberry Pi, use linux_sbc subdirectory to build and run.
#    - https://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_sdk/overview/
#  Author: Ryu Woon Jung (Leon)
#  Maintainer : Zerom, Will Son
# *******************************************************************************

import os

if os.name == 'nt':
    import msvcrt
    def getch():
        return msvcrt.getch().decode()
else:
    import sys, tty, termios
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    def getch():
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch

from dynamixel_sdk import *                    # Uses Dynamixel SDK library


#********* DYNAMIXEL Model definition *********
#***** (Use only one definition at a time) *****
MY_DXL = 'X_SERIES'       # X330 (5.0 V recommended), X430, X540, 2X430
# MY_DXL = 'MX_SERIES'    # MX series with 2.0 firmware update.
# MY_DXL = 'PRO_SERIES'   # H54, H42, M54, M42, L54, L42
# MY_DXL = 'PRO_A_SERIES' # PRO series with (A) firmware update.
# MY_DXL = 'P_SERIES'     # PH54, PH42, PM54

# Control table address
if MY_DXL == 'X_SERIES' or MY_DXL == 'MX_SERIES':
    ADDR_TORQUE_ENABLE          = 64
    ADDR_LED_RED                = 65
    LEN_LED_RED                 = 1         # Data Byte Length
    ADDR_GOAL_POSITION          = 116
    LEN_GOAL_POSITION           = 4         # Data Byte Length
    ADDR_PRESENT_POSITION       = 132
    LEN_PRESENT_POSITION        = 4         # Data Byte Length
    DXL_MINIMUM_POSITION_VALUE  = 0         # Refer to the Minimum Position Limit of product eManual
    DXL_MAXIMUM_POSITION_VALUE  = 250     # Refer to the Maximum Position Limit of product eManual # 4095
    BAUDRATE                    = 57600
elif MY_DXL == 'PRO_SERIES':
    ADDR_TORQUE_ENABLE          = 562       # Control table address is different in DYNAMIXEL model
    ADDR_LED_RED                = 563       # R.G.B Address: 563 (red), 564 (green), 565 (blue)
    LEN_LED_RED                 = 1         # Data Byte Length
    ADDR_GOAL_POSITION          = 596
    LEN_GOAL_POSITION           = 4
    ADDR_PRESENT_POSITION       = 611
    LEN_PRESENT_POSITION        = 4
    DXL_MINIMUM_POSITION_VALUE  = -150000   # Refer to the Minimum Position Limit of product eManual
    DXL_MAXIMUM_POSITION_VALUE  = 150000    # Refer to the Maximum Position Limit of product eManual
    BAUDRATE                    = 57600
elif MY_DXL == 'P_SERIES' or MY_DXL == 'PRO_A_SERIES':
    ADDR_TORQUE_ENABLE          = 512       # Control table address is different in DYNAMIXEL model
    ADDR_LED_RED                = 513       # R.G.B Address: 513 (red), 544 (green), 515 (blue)
    LEN_LED_RED                 = 1         # Data Byte Length
    ADDR_GOAL_POSITION          = 564
    LEN_GOAL_POSITION           = 4         # Data Byte Length
    ADDR_PRESENT_POSITION       = 580
    LEN_PRESENT_POSITION        = 4         # Data Byte Length
    DXL_MINIMUM_POSITION_VALUE  = -150000   # Refer to the Minimum Position Limit of product eManual
    DXL_MAXIMUM_POSITION_VALUE  = 150000    # Refer to the Maximum Position Limit of product eManual
    BAUDRATE                    = 57600

# DYNAMIXEL Protocol Version (1.0 / 2.0)
# https://emanual.robotis.com/docs/en/dxl/protocol2/
PROTOCOL_VERSION            = 2.0

# Make sure that each DYNAMIXEL ID should have unique ID.
DXL1_ID = 2                    #Right knee
DXL2_ID = 14                  #Right ankle
DXL3_ID = 1                  #Right front hip
DXL4_ID = 12                 #Left ankle
DXL5_ID = 17                  #Left knee
DXL6_ID = 7                  #left front hip
DXL7_ID = 9                  # left heel
DXL8_ID = 16                  # right heel
DXL9_ID =  13                 # left back hip
DXL10_ID = 15                # right back hip
DXL11_ID = 11                # left upper hip
DXL12_ID = 4                # right upper hip
init_7 = 152
init_1 = 311
init_2 = 178
init_17 = 186
init_12 = 62
init_14 = 138
init_16 = 92
init_9 = 190
init_4 = 340

# Use the actual port assigned to the U2D2.
# ex) Windows: "COM*", Linux: "/dev/ttyUSB*", Mac: "/dev/tty.usbserial-*"
DEVICENAME                  = '/dev/ttyUSB0'

TORQUE_ENABLE               = 1                 # Value for enabling the torque
TORQUE_DISABLE              = 0                 # Value for disabling the torque
DXL_MOVING_STATUS_THRESHOLD = 20                # Dynamixel moving status threshold

index = 0
# dxl_goal_position = [DXL_MINIMUM_POSITION_VALUE, DXL_MAXIMUM_POSITION_VALUE]        # Goal position

x6=[9.57023480511652,9.75988290657312,10.0673908795335,10.4814796932437,10.9889021297684,10.6662783282108,10.3337527927999,9.99033667203906,9.63486533759907,9.2659512804554,11.5205442122143,11.3002517754173,11.1170053255985,10.975670775728,10.8806162281871,10.8355576073075,10.8434320003272,10.9063149755783,11.0253920996067,11.2009864605438,7.86061219566969,6.67605248872767,5.44842336998276,4.17049797532127,2.83214055094812,1.76655964939098,1.17949692221155,0.609250805545857,0.0570806564109499,0.47579295884047,0.988231128796204,1.47922516822222,1.94794798533299,2.3938040858432,2.81647320337324,4.56596193479913,9.42343696216225,13.3534298413408,16.7300189871612,19.7067855779659,22.3586400337928,24.723054079723,26.8159912530193,28.6390934402488,30.1831801001079,31.4298953835394,32.3521708660313,32.9135919230075,33.0662711521144,32.7460967016924,31.8625686843404,30.2756781232769,27.734778135722,23.6605048813474,15.3127900653844,15.0046994144074,14.7216063009953,14.4630322863808,14.2282192398846,14.0161732678263,13.8257150230445,13.6555313840837,13.5042243441556,13.3703541985473,13.2524754289951,13.1491648132054,13.0590421170094,12.9807842379579,12.9131339089416,12.8549041118548,12.8049792679815,12.762314123938,12.725931082376,12.6949165618261,12.6684168240992,12.359616411539,12.0298172751459,11.6838042896202,11.3265483211601,10.9632886092025,10.5996026626775,10.2414574620482,9.89523222008542,9.56769970181388,9.2659512804554,8.99725230706682,8.76882106494621,8.58753784326917,8.45960933447779,8.39023270215579,8.38331519756878,8.44130152374984,8.56514033538073,8.75438983942296,9.00743254028637,8.3074231209542,7.61338781175981,6.92599032455552,6.24595337159594,5.57406318420008,4.91117349949556,4.25820857631823,3.61616465538116,2.98610911398784,2.36917639593445,1.76655964939098,1.17949692221155,0.609250805545857,0.0570806564109499,0.47579295884047,0.988231128796204,1.47922516822222,1.94794798533299,2.3938040858432,2.81647320337324,4.56596193479913,9.42343696216225,13.3534298413408,16.7300189871612,19.7067855779659,22.3586400337928,24.723054079723,26.8159912530193,28.6390934402488,30.1831801001079,31.4298953835394,32.3521708660313,32.9135919230075,33.0662711521144,32.7460967016924,31.8625686843404,30.2756781232769,27.734778135722,23.6605048813474,15.3127900653844,15.0046994144074,14.7216063009953,14.4630322863808,14.2282192398846,14.0161732678263,13.8257150230445,13.6555313840837,13.5042243441556,13.3703541985473,13.2524754289951,13.1491648132054,13.0590421170094,12.9807842379579,12.9131339089416,12.8549041118548,12.8049792679815,12.762314123938,12.725931082376,12.6949165618261,12.6684168240992,12.359616411539,12.0298172751459,11.6838042896202,11.3265483211601,10.9632886092025,10.5996026626775,10.2414574620482,9.89523222008542,9.56769970181388,9.2659512804554,8.99725230706682,8.76882106494621,8.58753784326917,8.45960933447779,8.39023270215579,8.38331519756878,8.44130152374984,8.56514033538073,8.75438983942296,9.00743254028637,8.3074231209542,7.61338781175981,6.92599032455552,6.24595337159594,5.57406318420008,4.91117349949556,4.25820857631823,3.61616465538116,2.98610911398784,2.36917639593445]
x3=[9.57023480511652,9.75988290657312,10.0673908795335,10.4814796932437,10.9889021297684,16.5931687703327,20.7752155480384,24.2821625458903,27.3754376774226,30.1831801001078,32.3495396534776,33.2870151386829,33.8719616258519,34.0581052284231,33.7846602908665,32.9677248150485,31.4812135225027,29.1088034143291,25.3880701911746,18.6880443508763,15.1146830663674,14.8465547669259,14.5211942381724,14.1474005936928,13.7315122802276,13.1491648132054,13.0590421170094,12.9807842379579,12.9131339089416,12.8549041118548,12.8049792679815,12.762314123938,12.725931082376,12.6949165618261,12.6684168240992,12.359616411539,12.0298172751459,11.6838042896202,11.3265483211601,10.9632886092025,10.5996026626775,10.2414574620482,9.89523222008542,9.56769970181388,9.2659512804554,8.99725230706682,8.76882106494621,8.58753784326917,8.45960933447779,8.39023270215579,8.38331519756878,8.44130152374984,8.56514033538073,8.75438983942296,9.00743254028637,8.3074231209542,7.61338781175981,6.92599032455552,6.24595337159594,5.57406318420008,4.91117349949556,4.25820857631823,3.61616465538116,2.98610911398784,2.36917639593445,1.76655964939098,1.17949692221155,0.609250805545857,0.0570806564109499,0.475792958839703,0.988231128796204,1.47922516822197,1.94794798533299,2.3938040858432,2.81647320337324,4.56596193479913,9.42343696216225,13.3534298413408,16.7300189871612,19.7067855779659,22.3586400337928,24.723054079723,26.8159912530193,28.6390934402488,30.1831801001079,31.4298953835394,32.3521708660313,32.9135919230075,33.0662711521144,32.7460967016924,31.8625686843404,30.2756781232769,27.734778135722,23.6605048813474,15.3127900653844,15.0046994144074,14.7216063009953,14.4630322863808,14.2282192398846,14.0161732678263,13.8257150230445,13.6555313840837,13.5042243441556,13.3703541985473,13.2524754289951,13.1491648132054,13.0590421170094,12.9807842379579,12.9131339089416,12.8549041118548,12.8049792679815,12.762314123938,12.725931082376,12.6949165618261,12.6684168240992,12.359616411539,12.0298172751459,11.6838042896202,11.3265483211601,10.9632886092025,10.5996026626775,10.2414574620482,9.89523222008542,9.56769970181388,9.2659512804554,8.99725230706682,8.76882106494621,8.58753784326917,8.45960933447779,8.39023270215579,8.38331519756878,8.44130152374984,8.56514033538073,8.75438983942296,9.00743254028637,8.3074231209542,7.61338781175981,6.92599032455552,6.24595337159594,5.57406318420008,4.91117349949556,4.25820857631823,3.61616465538116,2.98610911398784,2.36917639593445,1.76655964939098,1.17949692221155,0.609250805545857,0.0570806564109499,0.475792958839703,0.988231128796204,1.47922516822197,1.94794798533299,2.3938040858432,2.81647320337324,4.56596193479913,9.42343696216225,13.3534298413408,16.7300189871612,19.7067855779659,22.3586400337928,24.723054079723,26.8159912530193,28.6390934402488,30.1831801001079,31.4298953835394,32.3521708660313,32.9135919230075,33.0662711521144,32.7460967016924,31.8625686843404,30.2756781232769,27.734778135722,23.6605048813474,15.3127900653844,15.0046994144074,14.7216063009953,14.4630322863808,14.2282192398846,14.0161732678263,13.8257150230445,13.6555313840837,13.5042243441556,13.3703541985473,13.2524754289951]

x5=[160.224449619646,159.832666120811,159.197483368939,158.342308193509,157.294631885442,157.960807332209,158.647445643771,159.356588934379,160.090642173159,160.852470381829,155.805741659397,155.869551198359,155.856807389079,155.757242796207,155.561585841495,155.261879381898,154.851741865652,154.326537424628,153.683433744635,152.921343929519,158.304174416618,159.203493387937,160.196569310659,161.298351663386,162.529787688447,163.979764292867,164.424279256781,164.833413889169,165.204376210847,165.534460118983,165.821134886747,166.062146381049,166.255623903045,166.400183974915,166.495020655111,152.795966307509,144.400609093749,138.013875663616,132.864455313474,128.634007506755,125.163803797962,122.369145398447,120.206134590049,118.656664484917,117.721242153315,117.415902366111,117.771857613073,118.83769399378,120.684884617636,123.418874690238,127.201384758354,132.299401557871,139.212499657122,149.124097782649,167.684434650816,167.543192603087,167.352023010946,167.11174393782,166.823751894578,166.489931369495,166.112550845826,165.694155757554,165.237467086176,164.745291710144,164.220447887812,163.665706892915,163.083750083551,162.477139611032,161.848300468217,161.199511485786,160.532903055573,159.85045966653,159.154025691529,158.445313206348,157.725910926276,157.971751003047,158.261150192016,158.58436932359,158.93125143754,159.291051716362,159.652293299962,160.002661783882,160.32895850888,160.617139463346,160.852470381829,161.019825726399,161.10414541515,161.091035778241,160.967462678284,160.722445211982,160.347634594354,159.837670402496,159.190249294587,158.405906179357,157.487569593413,158.159076622222,158.819847802898,159.468307399434,160.102756463147,160.721363902649,161.32215867463,161.903024009633,162.461694890341,162.995760342041,163.502672446192,163.979764292867,164.424279256781,164.833413889169,165.204376210847,165.534460118983,165.821134886747,166.062146381049,166.255623903045,166.400183974915,166.495020655111,152.795966307509,144.400609093749,138.013875663616,132.864455313474,128.634007506755,125.163803797962,122.369145398447,120.206134590049,118.656664484917,117.721242153315,117.415902366111,117.771857613073,118.83769399378,120.684884617636,123.418874690238,127.201384758354,132.299401557871,139.212499657122,149.124097782649,167.684434650816,167.543192603087,167.352023010946,167.11174393782,166.823751894578,166.489931369495,166.112550845826,165.694155757554,165.237467086176,164.745291710144,164.220447887812,163.665706892915,163.083750083551,162.477139611032,161.848300468217,161.199511485786,160.532903055573,159.85045966653,159.154025691529,158.445313206348,157.725910926276,157.971751003047,158.261150192016,158.58436932359,158.93125143754,159.291051716362,159.652293299962,160.002661783882,160.32895850888,160.617139463346,160.852470381829,161.019825726399,161.10414541515,161.091035778241,160.967462678284,160.722445211982,160.347634594354,159.837670402496,159.190249294587,158.405906179357,157.487569593413,158.159076622222,158.819847802898,159.468307399434,160.102756463147,160.721363902649,161.32215867463,161.903024009633,162.461694890341,162.995760342041,163.502672446192]
x1=[160.224449619646,159.832666120811,159.197483368939,158.342308193509,157.294631885442,145.726201293916,137.099713386876,129.871121307831,123.499955861786,117.721242153315,115.549279095446,115.898824297503,116.940214955998,118.740985299391,121.399138812294,125.062268596974,129.968202613741,136.545333543886,145.73537194399,160.898834245116,166.556525358415,165.571202638291,164.702288739416,163.931788451997,163.246753908114,163.665706892915,163.083750083551,162.477139611032,161.848300468217,161.199511485786,160.532903055573,159.85045966653,159.154025691529,158.445313206348,157.725910926276,157.971751003047,158.261150192016,158.58436932359,158.93125143754,159.291051716362,159.652293299962,160.002661783882,160.32895850888,160.617139463346,160.852470381829,161.019825726399,161.10414541515,161.091035778241,160.967462678284,160.722445211982,160.347634594354,159.837670402496,159.190249294587,158.405906179357,157.487569593413,158.159076622222,158.819847802898,159.468307399434,160.102756463147,160.721363902649,161.32215867463,161.903024009633,162.461694890341,162.995760342041,163.502672446192,163.979764292867,164.424279256781,164.833413889169,165.204376210847,165.534460118983,165.821134886747,166.062146381049,166.255623903045,166.400183974915,166.495020655111,152.795966307509,144.400609093749,138.013875663616,132.864455313474,128.634007506755,125.163803797962,122.369145398447,120.206134590049,118.656664484917,117.721242153315,117.415902366111,117.771857613073,118.83769399378,120.684884617636,123.418874690238,127.201384758354,132.299401557871,139.212499657122,149.124097782649,167.684434650816,167.543192603087,167.352023010946,167.11174393782,166.823751894578,166.489931369495,166.112550845826,165.694155757554,165.237467086176,164.745291710144,164.220447887812,163.665706892915,163.083750083551,162.477139611032,161.848300468217,161.199511485786,160.532903055573,159.85045966653,159.154025691529,158.445313206348,157.725910926276,157.971751003047,158.261150192016,158.58436932359,158.93125143754,159.291051716362,159.652293299962,160.002661783882,160.32895850888,160.617139463346,160.852470381829,161.019825726399,161.10414541515,161.091035778241,160.967462678284,160.722445211982,160.347634594354,159.837670402496,159.190249294587,158.405906179357,157.487569593413,158.159076622222,158.819847802898,159.468307399434,160.102756463147,160.721363902649,161.32215867463,161.903024009633,162.461694890341,162.995760342041,163.502672446192,163.979764292867,164.424279256781,164.833413889169,165.204376210847,165.534460118983,165.821134886747,166.062146381049,166.255623903045,166.400183974915,166.495020655111,152.795966307509,144.400609093749,138.013875663616,132.864455313474,128.634007506755,125.163803797962,122.369145398447,120.206134590049,118.656664484917,117.721242153315,117.415902366111,117.771857613073,118.83769399378,120.684884617636,123.418874690238,127.201384758354,132.299401557871,139.212499657122,149.124097782649,167.684434650816,167.543192603087,167.352023010946,167.11174393782,166.823751894578,166.489931369495,166.112550845826,165.694155757554,165.237467086176,164.745291710144,164.220447887812]

x4=[79.7948306219842,79.5931222041946,79.266123603337,78.825919073838,78.2867061560617,78.630348730488,78.9845613383389,79.3503987713513,79.7291032934952,80.1221548758289,77.3292689210459,77.1727889714897,76.9767927529105,76.7358775773792,76.4451391613009,76.1003359324295,75.6980235813723,75.2356424712619,74.7115469668399,74.1249747164579,76.167425032877,75.8817110759689,75.6467263518795,75.4701933463069,75.3629239029208,75.7463674109984,75.6039546664195,75.4430762784512,75.2622052908363,75.0598604993239,74.8346525916929,74.5853363296155,74.3108656560862,74.0104472830654,73.6835874110046,67.3644093735309,63.8259631469214,61.3689627241248,59.5959873059662,58.3422214354659,57.5238238265017,57.0935558407108,57.0234767978803,57.2971177094802,57.905802506509,58.8472084080532,60.1254785292974,61.7527842862399,63.7527126988743,66.1666008836063,69.0656781470256,72.5769421103523,76.9493725388958,82.7872161542021,93.0031980482367,92.5526795172653,92.0773578869112,91.577579880546,91.0539874047649,90.507471114789,89.9391171183683,89.3501521660099,88.7418917723699,88.1156943845723,87.4729233168071,86.8149169648248,86.1429669276671,85.4583031165119,84.7620846727094,84.0553954711181,83.3392430723335,82.6145601440616,81.88220755211,81.1429784968339,80.3976032263023,80.3346725154197,80.2943092975369,80.2715583811881,80.2612326328371,80.2578252058054,80.2554351647443,80.2477131062113,80.2278371499896,80.1885331447162,80.1221548758289,80.0208385686697,79.8767388392125,79.6823390969972,79.4308094904853,79.1163650672393,78.7345645208157,78.2824938185281,77.7588011975764,77.1635835292359,76.4981559612426,76.4691281377625,76.435373374243,76.3959832010447,76.3499854314504,76.2963397799803,76.233934057728,76.1615814129881,76.0780192408667,75.9819105609254,75.8718488421266,75.7463674109984,75.6039546664195,75.4430762784512,75.2622052908363,75.0598604993239,74.8346525916929,74.5853363296155,74.3108656560862,74.0104472830654,73.6835874110046,67.3644093735309,63.8259631469214,61.3689627241248,59.5959873059662,58.3422214354659,57.5238238265017,57.0935558407108,57.0234767978803,57.2971177094802,57.905802506509,58.8472084080532,60.1254785292974,61.7527842862399,63.7527126988743,66.1666008836063,69.0656781470256,72.5769421103523,76.9493725388958,82.7872161542021,93.0031980482367,92.5526795172653,92.0773578869112,91.577579880546,91.0539874047649,90.507471114789,89.9391171183683,89.3501521660099,88.7418917723699,88.1156943845723,87.4729233168071,86.8149169648248,86.1429669276671,85.4583031165119,84.7620846727094,84.0553954711181,83.3392430723335,82.6145601440616,81.88220755211,81.1429784968339,80.3976032263023,80.3346725154197,80.2943092975369,80.2715583811881,80.2612326328371,80.2578252058054,80.2554351647443,80.2477131062113,80.2278371499896,80.1885331447162,80.1221548758289,80.0208385686697,79.8767388392125,79.6823390969972,79.4308094904853,79.1163650672393,78.7345645208157,78.2824938185281,77.7588011975764,77.1635835292359,76.4981559612426,76.4691281377625,76.435373374243,76.3959832010447,76.3499854314504,76.2963397799803,76.233934057728,76.1615814129881,76.0780192408667,75.9819105609254,75.8718488421266]
x2=[79.7948306219842,79.5931222041946,79.266123603337,78.825919073838,78.2867061560618,72.3215437683688,67.8767266278939,64.1548776685961,60.876859691386,57.905802506509,57.900207988859,59.1872687128095,60.8136537347083,62.8006243141008,65.1854012673448,68.0316827263253,71.4512273049679,75.6561445196236,81.1258513932946,89.5908567231107,91.6756553131265,90.4210379214449,89.2258545481279,88.0808482127473,86.9793706207299,86.8149169648248,86.1429669276671,85.4583031165119,84.7620846727094,84.0553954711181,83.3392430723335,82.6145601440616,81.88220755211,81.1429784968339,80.3976032263023,80.3346725154197,80.2943092975369,80.2715583811881,80.2612326328371,80.2578252058054,80.2554351647443,80.2477131062113,80.2278371499896,80.1885331447162,80.1221548758289,80.0208385686697,79.8767388392125,79.6823390969972,79.4308094904853,79.1163650672393,78.7345645208157,78.2824938185281,77.7588011975764,77.1635835292359,76.4981559612426,76.4691281377625,76.435373374243,76.3959832010447,76.3499854314504,76.2963397799803,76.233934057728,76.1615814129881,76.0780192408667,75.9819105609254,75.8718488421266,75.7463674109984,75.6039546664195,75.4430762784512,75.2622052908363,75.0598604993239,74.8346525916929,74.5853363296155,74.3108656560862,74.0104472830654,73.6835874110046,67.3644093735309,63.8259631469214,61.3689627241248,59.5959873059662,58.3422214354659,57.5238238265017,57.0935558407108,57.0234767978803,57.2971177094802,57.905802506509,58.8472084080532,60.1254785292974,61.7527842862399,63.7527126988743,66.1666008836063,69.0656781470256,72.5769421103523,76.9493725388958,82.7872161542021,93.0031980482367,92.5526795172653,92.0773578869112,91.577579880546,91.0539874047649,90.507471114789,89.9391171183683,89.3501521660099,88.7418917723699,88.1156943845723,87.4729233168071,86.8149169648248,86.1429669276671,85.4583031165119,84.7620846727094,84.0553954711181,83.3392430723335,82.6145601440616,81.88220755211,81.1429784968339,80.3976032263023,80.3346725154197,80.2943092975369,80.2715583811881,80.2612326328371,80.2578252058054,80.2554351647443,80.2477131062113,80.2278371499896,80.1885331447162,80.1221548758289,80.0208385686697,79.8767388392125,79.6823390969972,79.4308094904853,79.1163650672393,78.7345645208157,78.2824938185281,77.7588011975764,77.1635835292359,76.4981559612426,76.4691281377625,76.435373374243,76.3959832010447,76.3499854314504,76.2963397799803,76.233934057728,76.1615814129881,76.0780192408667,75.9819105609254,75.8718488421266,75.7463674109984,75.6039546664195,75.4430762784512,75.2622052908363,75.0598604993239,74.8346525916929,74.5853363296155,74.3108656560862,74.0104472830654,73.6835874110046,67.3644093735309,63.8259631469214,61.3689627241248,59.5959873059662,58.3422214354659,57.5238238265017,57.0935558407108,57.0234767978803,57.2971177094802,57.905802506509,58.8472084080532,60.1254785292974,61.7527842862399,63.7527126988743,66.1666008836063,69.0656781470256,72.5769421103523,76.9493725388958,82.7872161542021,93.0031980482367,92.5526795172653,92.0773578869112,91.577579880546,91.0539874047649,90.507471114789,89.9391171183683,89.3501521660099,88.7418917723699,88.1156943845723,87.4729233168071]

x7=[91.204709390404,92.4083545205441,93.6098767604929,94.8082286667361,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,95.4058928127519,94.8082286667361,94.2095138843536,93.6098767604929,93.009446793474, 86.3901232395071,85.7904861156464,85.1917713332639,84.5941071872481,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,84.5941071872481,85.1917713332639,85.7904861156464,86.3901232395071,86.990553206526,87.5916454794559,88.1932686500088,88.795290609596,89.3975787223688,90,90.6024212776313,91.204709390404,91.8067313499911,92.4083545205441,93.009446793474,93.6098767604929,94.2095138843536,94.8082286667361,95.4058928127519,96.0023793915529,96.0, 90.6024212776313,91.204709390404,91.8067313499911,92.4083545205441,93.009446793474023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,95.4058928127519,94.8082286667361,94.2095138843536,93.6098767604929,93.009446793474,92.4083545205441,91.8067313499911,91.204709390404,90.6024212776313,90,89.3975787223688,88.795290609596,88.1932686500089,87.5916454794559,86.990553206526,86.3901232395071,85.7904861156464,85.1917713332639,84.5941071872481,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,84.5941071872481,85.1917713332639,85.7904861156464,86.3901232395071,86.990553206526,87.5916454794559,88.1932686500088,88.795290609596,89.3975787223688,90,90.6024212776313,91.204709390404,91.8067313499911,92.4083545205441,93.009446793474,93.6098767604929,94.2095138843536,94.8082286667361,95.4058928127519,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,95.4058928127519,94.8082286667361,94.2095138843536,93.6098767604929,93.009446793474,92.4083545205441,91.8067313499911,91.204709390404,90.6024212776313,90, 89.3975787223688,88.795290609596,88.1932686500089,87.5916454794559,86.990553206526]
x8=[88.795290609596,87.5916454794559,86.3901232395071,85.1917713332639,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,84.5941071872481,85.1917713332639,85.7904861156464,86.3901232395071,86.990553206526, 93.6098767604929,94.2095138843536,94.8082286667361,95.4058928127519,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,95.4058928127519,94.8082286667361,94.2095138843536,93.6098767604929,93.009446793474,92.4083545205441,91.8067313499911,91.204709390404,90.6024212776313,90,89.3975787223688,88.795290609596,88.1932686500089,87.5916454794559,86.990553206526,86.3901232395071,85.7904861156464,85.1917713332639,84.5941071872481,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,84.5941071872481,85.1917713332639,85.7904861156464,86.3901232395071,86.990553206526,87.5916454794559,88.1932686500089,88.795290609596,89.3975787223688,90,90.6024212776313,91.204709390404,91.8067313499911,92.4083545205441,93.009446793474,93.6098767604929,94.2095138843536,94.8082286667361,95.4058928127519,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,96.0023793915529,95.4058928127519,94.8082286667361,94.2095138843536,93.6098767604929,93.009446793474,92.4083545205441,91.8067313499911,91.204709390404,90.6024212776313,90,89.3975787223688,88.795290609596,88.1932686500089,87.5916454794559,86.990553206526,86.3901232395071,85.7904861156464,85.1917713332639,84.5941071872481,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,83.9976206084471,84.5941071872481,85.1917713332639,85.7904861156464,86.3901232395071,86.990553206526,87.5916454794559,88.1932686500089,88.795290609596,89.3975787223688,90, 90.6024212776313,91.204709390404,91.8067313499911,92.4083545205441,93.009446793474]

grad_7 = (init_7 - 148.8 + x6[0])/15
grad_2 = (180 - x5[0])/15
grad_17 = (180 - x1[0])/15
grad_12 = (init_12 - 90 -113 + x2[0])/15
grad_14 = (79.79 - x4[0])/15
grad_16 = (x7[0]-90)/15
grad_9 = (x8[0] - 90)/15
x1a= [init_17 + (grad_17*i) for i in range(15)] 
x2a= [init_12 + (grad_12*i) for i in range(15)]
x4a= [init_14 + (grad_14*i) for i in range(15)]
x5a= [init_2 + (grad_2*i) for i in range(15)]
x3a= [9.57 for i in range(15)]
x6a= [init_7 + (grad_7*i) for i in range(15)]
x7a= [init_16 + (grad_16*i) for i in range(15)]
x8a= [init_9 + (grad_9*i) for i in range(15)]
# x1 = x1a + x1
# x2 = x2a + x2
# x3 = x3a + x3
# x4 = x4a + x4
# x5 = x5a + x5
# x6 = x6a + x6
# x7 = x7a + x7
# x8 = x8a + x8

dxl_goal_position_1=[int((-180 + init_2 + (i))*4096/360) for i in x1]
dxl_goal_position_2=[int((init_14 -90 + (i) )*4096/360) for i in x2]
dxl_goal_position_3=[int((init_1 + (i + 5))*4096/360) for i in x3]
dxl_goal_position_4=[int((init_12 + 90 - (i))*4096/360) for i in x4]
dxl_goal_position_5=[int((init_17 -180 + i)*4096/360) for i in x5]
dxl_goal_position_6=[int((init_7 - (i + 5))*4096/360) for i in x6]
dxl_goal_position_7=[int(((init_9 +(90 - i ) ))*4096/360) for i in x7]
dxl_goal_position_8=[int((init_16+ (-90 + i))*4096/360) for i in x8]
dxl_goal_position_9=[int(((140 - (i -90)))*4096/360) for i in x7]
dxl_goal_position_10=[int((160 - 90 + i)*4096/360) for i in x8]
dxl_goal_position_11=[int(((224))*4096/360) for i in x7]
dxl_goal_position_12=[int((343)*4096/360) for i in x8]   

length = len(dxl_goal_position_1)


# dxl_led_value = [0x00, 0x01]   #        # Dynamixel LED value for write

# Initialize PortHandler instance
# Set the port path
# Get methods and members of PortHandlerLinux or PortHandlerWindows
portHandler = PortHandler(DEVICENAME)

# Initialize PacketHandler instance
# Set the protocol version
# Get methods and members of Protocol1PacketHandler or Protocol2PacketHandler
packetHandler = PacketHandler(PROTOCOL_VERSION)

# Initialize GroupBulkWrite instance
groupBulkWrite = GroupBulkWrite(portHandler, packetHandler)

# Initialize GroupBulkRead instace for Present Position
groupBulkRead = GroupBulkRead(portHandler, packetHandler)

# Open port
if portHandler.openPort():
    print("Succeeded to open the port")
else:
    print("Failed to open the port")
    print("Press any key to terminate...")
    getch()
    quit()


# Set port baudrate
if portHandler.setBaudRate(BAUDRATE):
    print("Succeeded to change the baudrate")
else:
    print("Failed to change the baudrate")
    print("Press any key to terminate...")
    getch()
    quit()


# Enable Dynamixel#1 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL1_ID)

# Enable Dynamixel#2 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL2_ID)

# Enable Dynamixel#2 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL3_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL3_ID)

# Enable Dynamixel#2 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL4_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL4_ID)

# Enable Dynamixel#2 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL5_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL5_ID)

# Enable Dynamixel#2 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL6_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL6_ID)

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL7_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL7_ID)

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL8_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL8_ID)

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL9_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL9_ID)

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL10_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL10_ID)

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL11_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL11_ID)

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL12_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))
else:
    print("Dynamixel#%d has been successfully connected" % DXL12_ID)


# Add parameter storage for Dynamixel#1 present position
dxl_addparam_result = groupBulkRead.addParam(DXL1_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL1_ID)
    quit()

# Add parameter storage for Dynamixel#2 LED value
dxl_addparam_result = groupBulkRead.addParam(DXL2_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL2_ID)
    

# Add parameter storage for Dynamixel#1 present position
dxl_addparam_result = groupBulkRead.addParam(DXL3_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL3_ID)
    quit()

# Add parameter storage for Dynamixel#1 present position
dxl_addparam_result = groupBulkRead.addParam(DXL4_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL4_ID)
    quit()

# Add parameter storage for Dynamixel#1 present position
dxl_addparam_result = groupBulkRead.addParam(DXL5_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL5_ID)
    

# Add parameter storage for Dynamixel#1 present position
dxl_addparam_result = groupBulkRead.addParam(DXL6_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL6_ID)

dxl_addparam_result = groupBulkRead.addParam(DXL7_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL7_ID)

dxl_addparam_result = groupBulkRead.addParam(DXL8_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
if dxl_addparam_result != True:
    print("[ID:%03d] groupBulkRead addparam failed" % DXL8_ID)

# dxl_addparam_result = groupBulkRead.addParam(DXL9_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
# if dxl_addparam_result != True:
#      print("[ID:%03d] groupBulkRead addparam failed" % DXL9_ID)

# dxl_addparam_result = groupBulkRead.addParam(DXL10_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
# if dxl_addparam_result != True:
#      print("[ID:%03d] groupBulkRead addparam failed" % DXL10_ID)

count = 0
while 1:
    print("Press any key to continue! (or press ESC to quit!)")
    #if index <= 1:
    if getch() == chr(0x1b):
            break

    # Allocate goal position value into byte array
    param_goal_position_1 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_1[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_1[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_1[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_1[index]))]
    param_goal_position_2 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_2[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_2[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_2[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_2[index]))]
    param_goal_position_3 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_3[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_3[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_3[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_3[index]))]
    param_goal_position_4 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_4[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_4[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_4[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_4[index]))]
    param_goal_position_5 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_5[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_5[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_5[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_5[index]))]
    param_goal_position_6 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_6[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_6[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_6[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_6[index]))]
    param_goal_position_7 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_7[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_7[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_7[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_7[index]))]
    param_goal_position_8 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_8[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_8[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_8[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_8[index]))]
    # param_goal_position_9 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_9[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_9[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_9[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_9[index]))]
    # param_goal_position_10 = [DXL_LOBYTE(DXL_LOWORD(dxl_goal_position_10[index])), DXL_HIBYTE(DXL_LOWORD(dxl_goal_position_10[index])), DXL_LOBYTE(DXL_HIWORD(dxl_goal_position_10[index])), DXL_HIBYTE(DXL_HIWORD(dxl_goal_position_10[index]))]

    # Add Dynamixel#1 goal position value to the Bulkwrite parameter storage
    dxl_addparam_result = groupBulkWrite.addParam(DXL1_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_1)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL1_ID)
        quit()

    # Add Dynamixel#2 goal position value to the Bulkwrite parameter storage
    dxl_addparam_result = groupBulkWrite.addParam(DXL2_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_2)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL2_ID)
    

    # Add Dynamixel#3 goal position value to the Bulkwrite parameter storage
    dxl_addparam_result = groupBulkWrite.addParam(DXL3_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_3)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL3_ID)
        quit()

    # Add Dynamixel#3 goal position value to the Bulkwrite parameter storage
    dxl_addparam_result = groupBulkWrite.addParam(DXL4_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_4)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL4_ID)
        quit()

    dxl_addparam_result = groupBulkWrite.addParam(DXL5_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_5)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL5_ID)
        
    
    dxl_addparam_result = groupBulkWrite.addParam(DXL6_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_6)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL6_ID)

    dxl_addparam_result = groupBulkWrite.addParam(DXL7_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_7)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL7_ID)

    dxl_addparam_result = groupBulkWrite.addParam(DXL8_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_8)
    if dxl_addparam_result != True:
        print("[ID:%03d] groupBulkWrite addparam failed" % DXL8_ID)

    # dxl_addparam_result = groupBulkWrite.addParam(DXL9_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_9)
    # if dxl_addparam_result != True:
    #     print("[ID:%03d] groupBulkWrite addparam failed" % DXL9_ID)

    # dxl_addparam_result = groupBulkWrite.addParam(DXL10_ID, ADDR_GOAL_POSITION, LEN_GOAL_POSITION, param_goal_position_10)
    # if dxl_addparam_result != True:
    #     print("[ID:%03d] groupBulkWrite addparam failed" % DXL10_ID)
        

    # Bulkwrite goal position and LED value
    dxl_comm_result = groupBulkWrite.txPacket()
    if dxl_comm_result != COMM_SUCCESS:
        print("%s" % packetHandler.getTxRxResult(dxl_comm_result))

    # Clear bulkwrite parameter storage
    groupBulkWrite.clearParam()

    while 1:
        # Bulkread present position and LED status
        dxl_comm_result = groupBulkRead.txRxPacket()
        if dxl_comm_result != COMM_SUCCESS:
            print("%s" % packetHandler.getTxRxResult(dxl_comm_result))

        # Check if groupbulkread data of Dynamixel#1 is available
        dxl_getdata_result = groupBulkRead.isAvailable(DXL1_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL1_ID)
            quit()

        # Check if groupbulkread data of Dynamixel#2 is available
        dxl_getdata_result = groupBulkRead.isAvailable(DXL2_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL2_ID)
            quit()

        # Check if groupbulkread data of Dynamixel#2 is available
        dxl_getdata_result = groupBulkRead.isAvailable(DXL3_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL3_ID)
            quit()

        # Check if groupbulkread data of Dynamixel#2 is available
        dxl_getdata_result = groupBulkRead.isAvailable(DXL4_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL4_ID)
            quit()

        dxl_getdata_result = groupBulkRead.isAvailable(DXL5_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL5_ID)
            quit()

        dxl_getdata_result = groupBulkRead.isAvailable(DXL6_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL6_ID)
            quit()

        dxl_getdata_result = groupBulkRead.isAvailable(DXL7_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL7_ID)
            quit()

        dxl_getdata_result = groupBulkRead.isAvailable(DXL8_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        if dxl_getdata_result != True:
            print("[ID:%03d] groupBulkRead getdata failed" % DXL8_ID)
            quit()

        # dxl_getdata_result = groupBulkRead.isAvailable(DXL9_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        # if dxl_getdata_result != True:
        #     print("[ID:%03d] groupBulkRead getdata failed" % DXL9_ID)
        #     quit()

        # dxl_getdata_result = groupBulkRead.isAvailable(DXL10_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)
        # if dxl_getdata_result != True:
        #     print("[ID:%03d] groupBulkRead getdata failed" % DXL10_ID)
        #     quit()


        # Get present position value
        dxl1_present_position = groupBulkRead.getData(DXL1_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        # Get LED value
        dxl2_present_position = groupBulkRead.getData(DXL2_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        # Get present position value
        dxl3_present_position = groupBulkRead.getData(DXL3_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        # Get present position value
        dxl4_present_position = groupBulkRead.getData(DXL4_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        dxl5_present_position = groupBulkRead.getData(DXL5_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        dxl6_present_position = groupBulkRead.getData(DXL6_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        dxl7_present_position = groupBulkRead.getData(DXL7_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        dxl8_present_position = groupBulkRead.getData(DXL8_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        # dxl9_present_position = groupBulkRead.getData(DXL9_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        # dxl10_present_position = groupBulkRead.getData(DXL10_ID, ADDR_PRESENT_POSITION, LEN_PRESENT_POSITION)

        print("[ID:%03d] Present Position : %d \t [ID:%03d] Present Position : %d \t [ID:%03d] Present Position : %d \t [ID:%03d] Present Position : %d  \t [ID:%03d] Present Position : %d \t [ID:%03d] Present Position : %d \t [ID:%03d] Present Position : %d \t [ID:%03d] Present Position : %d " % (DXL1_ID, dxl1_present_position, DXL2_ID, dxl2_present_position, DXL3_ID, dxl3_present_position, DXL4_ID, dxl4_present_position, DXL5_ID, dxl5_present_position, DXL6_ID, dxl6_present_position,DXL7_ID, dxl7_present_position, DXL8_ID, dxl8_present_position))

        if not (abs(dxl_goal_position_1[index] - dxl1_present_position) > DXL_MOVING_STATUS_THRESHOLD):
            break
        
    # Change goal position
    if index == 0:
        index = 1
    else:
        count+=1
        if count%2 == 0:
            index+=0
        else :
            index+=1
        if index >= 185:
            index = 25

# Clear bulkread parameter storage
groupBulkRead.clearParam()

# Disable Dynamixel#1 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

# Disable Dynamixel#2 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

# Disable Dynamixel#3 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL3_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

# Disable Dynamixel#4 Torque
dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL4_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL5_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL6_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL7_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL8_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL9_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL10_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL11_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))

dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL12_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
if dxl_comm_result != COMM_SUCCESS:
    print("%s" % packetHandler.getTxRxResult(dxl_comm_result))
elif dxl_error != 0:
    print("%s" % packetHandler.getRxPacketError(dxl_error))


# Close port
portHandler.closePort()
